{"version":3,"file":"static/js/907.4e512a93.chunk.js","mappings":"iRAKe,SAASA,EAAT,GAAiC,IAAD,EAATC,EAAS,EAATA,MAIlCC,EAMID,EANJC,MACAC,EAKIF,EALJE,aACEC,EAIEH,EAJFG,OACAC,EAGEJ,EAHFI,SACAC,EAEEL,EAFFK,YACAC,EACEN,EADFM,aAIIC,EAAYJ,EAAOK,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MAEzD,OACI,4BACM,gBAAKC,UAAU,wBAAf,SACKP,GACG,gBAAKO,UAAU,SAASC,IAAG,UAlB9B,mCAkB8B,OAAgBR,GAAeS,IAAKb,KAC/D,gBAAKW,UAAU,UAAUC,IAAKE,EAAOD,IAAKb,OAGlD,iBAAKW,UAAU,0BAAf,WACM,gBAAIA,UAAU,qBAAd,iBAAoCX,QAApC,IAAoCA,EAAAA,EAAS,GAA7C,IAAkDC,EAAY,WAAOA,EAAac,MAAM,EAAG,GAA7B,KAAqC,OACnG,kDAAgBV,EAAaW,QAAQ,UAArC,QAA2C,OAC3C,eAAIL,UAAU,oBAAd,uBACA,cAAGA,UAAU,0BAAb,gBAAwCR,QAAxC,IAAwCA,EAAAA,EAAY,MACpD,eAAIQ,UAAU,oBAAd,qBACA,cAAGA,UAAU,gCAAb,gBAA8CL,QAA9C,IAA8CA,EAAAA,EAAa,UAI5E,CCjCc,SAASW,EAAT,GAAiC,IAAD,IAANC,EAAM,EAANA,GAC7BC,GAAWC,EAAAA,EAAAA,MAErB,OACI,4BACM,mDACA,2BACE,yBACI,SAAC,KAAD,CAAMC,GAAI,OAAQH,GAAIA,EAAII,MAAO,CAAEC,KAAI,UAAEJ,EAASG,aAAX,aAAE,EAAgBC,MAAzD,qBAEJ,yBACI,SAAC,KAAD,CAAMF,GAAI,UAAWH,GAAIA,EAAII,MAAO,CAAEC,KAAI,UAAEJ,EAASG,aAAX,aAAE,EAAgBC,MAA5D,2BAGZ,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAKP,C,aCjBc,SAASC,IAAkB,IAAD,EAC7BC,GAAYC,EAAAA,EAAAA,MAAZD,QACFR,GAAWC,EAAAA,EAAAA,MACjB,GAA0BS,EAAAA,EAAAA,UAAS,MAAnC,eAAO9B,EAAP,KAAc+B,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KALqC,wCAQrC,WAAiChB,GAAjC,8EACIc,GAAW,GADf,mBAGmCG,EAAAA,EAAAA,IAAcjB,GAHjD,OAGckB,EAHd,OAIQN,EAASM,EAAaC,MAJ9B,gDAOYH,EAAS,EAAD,IAPpB,yBAUWF,GAAW,GAVtB,6EARqC,sBA2BrC,OALAM,EAAAA,EAAAA,YAAU,YAtB2B,oCAuBjCC,CAAkBZ,EACrB,GAAE,CAACA,KAIF,gCACOM,IAAS,yCAAiBA,EAAMO,WAChCT,IAAW,SAACU,EAAA,EAAD,qEACX1C,IACG,4BACI,SAAC,KAAD,CAAMsB,GAAE,UAAEF,EAASG,aAAX,aAAE,EAAgBC,KAA1B,sBACA,SAACzB,EAAD,CAAaC,MAAOA,KACpB,SAACkB,EAAD,CAAgBC,GAAIS,SAKvC,C","sources":["components/SingleMovie/SingleMovie.jsx","components/SingleMovie/AdditionalInfo.jsx","pages/MovieIdDetails/MovieIdDetails.jsx"],"sourcesContent":["import React from 'react'\nimport noImg from 'images/noImages.jpg'\nimport PropTypes from 'prop-types';\n\n\nexport default function SingleMovie({ movie }) {\nconst imageURL = \"https://image.tmdb.org/t/p/w500\";\n\nconst {\n    title,\n    release_date,\n      genres,\n      overview,\n      poster_path,\n      vote_average,\n    } = movie;\n\n\n    const genreName = genres.map(ganre => ganre.name).join(', ');\n\n  return (\n      <div>\n            <div className=\"modal-movie-cont__img\">\n                {poster_path ? \n                    <img className=\"poster\" src={`${imageURL}${poster_path}`} alt={title}  /> : \n                    <img className=\"noImage\" src={noImg} alt={title} />\n                }\n            </div>\n            <div className=\"modal-movie-cont__about\">\n                  <h2 className=\"modal-movie__title\">{title ?? ''} {release_date ? `(${release_date.slice(0, 4)})` : ''}</h2>\n                  <p>User score: {vote_average.toFixed(1) ?? ''}</p>\n                  <h3 className=\"modal-movie-about\">Overview</h3>\n                  <p className=\"modal-movie-descr-movie\">{overview ?? ''}</p>\n                  <h3 className=\"modal-movie-about\">Genres</h3>\n                  <p className=\"modal-movie-table__item-value\">{genreName ?? ''}</p>\n            </div>\n       </div>\n  )\n}\n\nSingleMovie.propTypes = {\n  movie: PropTypes.shape ({ \n      title: PropTypes.string.isRequired, \n      release_date: PropTypes.string, \n    genres: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string, \n  })\n        ),\n      overview: PropTypes.string, \n      poster_path: PropTypes.string, \n      vote_average: PropTypes.number, \n        } ),\n}","import React, { Suspense } from 'react'\nimport { Link, Outlet, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nexport default function AdditionalInfo({ id }) {\n      const location = useLocation();\n\n  return (\n      <div>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                  <Link to={'cast'} id={id} state={{ from: location.state?.from }}>Cast</Link >\n              </li>\n              <li>\n                  <Link to={'reviews'} id={id} state={{ from: location.state?.from }}>Reviews</Link >\n              </li>\n      </ul>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n\n      </div>\n  )\n}\n\nAdditionalInfo.propTypes = {\n        id: PropTypes.string.isRequired, \n}","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { fetchOneMovie } from 'components/fetchMovies';\nimport { useParams, useLocation, Link } from 'react-router-dom';\nimport SingleMovie from 'components/SingleMovie/SingleMovie'\nimport AdditionalInfo from 'components/SingleMovie/AdditionalInfo'\nimport Loader from 'components/Loader/Loader'\n\nexport default function MovieIdDetails() {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [movie, setMovie] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\n    async function fetchMoviesResult(id) {\n        setLoading(true);\n        try {\n            const responseData = await fetchOneMovie(id);\n            setMovie(responseData.data);\n            }\n            catch (error) {\n                setError(error);\n            }\n            finally {\n               setLoading(false)\n            }\n        };\n    \n    useEffect(() => {\n        fetchMoviesResult(movieId);\n    }, [movieId])\n\n\n    return (\n      <>\n            {error && <p>error massage{error.massage}</p>}\n            {loading && <Loader>Загружаем</Loader>}\n            {movie &&\n                <div>\n                    <Link to={location.state?.from}>Go back</Link>\n                    <SingleMovie movie={movie} />\n                    <AdditionalInfo id={movieId} />\n                </div>\n            }\n      </>\n  )\n}\n"],"names":["SingleMovie","movie","title","release_date","genres","overview","poster_path","vote_average","genreName","map","ganre","name","join","className","src","alt","noImg","slice","toFixed","AdditionalInfo","id","location","useLocation","to","state","from","Suspense","fallback","MovieIdDetails","movieId","useParams","useState","setMovie","loading","setLoading","error","setError","fetchOneMovie","responseData","data","useEffect","fetchMoviesResult","massage","Loader"],"sourceRoot":""}