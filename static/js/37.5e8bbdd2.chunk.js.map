{"version":3,"file":"static/js/37.5e8bbdd2.chunk.js","mappings":"yNAMe,SAASA,EAAT,GAAkC,IAAZC,EAAW,EAAXA,SACjC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAgBA,OACI,0BACI,kBAAMC,UAAU,aAAaJ,SAZhB,SAACK,GAElB,GADAA,EAAEC,iBACyB,KAAvBJ,EAAYK,OACZ,OAAOC,EAAAA,EAAAA,IAAM,8BAGjBR,EAASE,GACTC,EAAe,GAClB,EAIO,WACI,mBAAQM,KAAK,SAASL,UAAU,oBAAhC,UACI,iBAAMA,UAAU,0BAAhB,uBAGJ,kBACIA,UAAU,mBACVK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,KAAK,cACLC,MAAOZ,EACPa,SA7BK,SAACV,GAClBF,EAAeE,EAAEW,cAAcF,MAAMG,cACxC,QAgCJ,C,iDCtCc,SAASC,EAAT,GAAgD,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAEhD,OACE,8BACSD,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACP,eAAanB,UAAU,mBAAvB,UACI,SAAC,KAAD,CAAMoB,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMN,GAAlC,SAA+CG,KAD1CD,EADF,KAOtB,C,sBCLc,SAASK,EAAT,GAAuC,IAAD,EAAfzB,EAAe,EAAfA,YAClC,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAO2B,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,GAAWa,EAAAA,EAAAA,MACXC,EAAK,UAAGH,EAAaI,IAAI,gBAApB,QAAgC,GAC3C,GAA8BlC,EAAAA,EAAAA,WAAS,GAAvC,eAAOmC,EAAP,KAAgBC,EAAhB,KACA,GAA0BpC,EAAAA,EAAAA,UAAS,MAAnC,eAAOqC,EAAP,KAAcC,EAAd,KANiD,wCASjD,WAAiCC,GAAjC,8EACIH,GAAW,GADf,mBAGuCI,EAAAA,EAAAA,IAAeD,GAHtD,OAIYE,EADMC,EAHlB,QAKYd,EAAUc,EAAaC,KAAKC,SALxC,gDAQYN,EAAS,EAAD,IARpB,yBAWWF,GAAW,GAXtB,6EATiD,sBAwBjD,SAASK,EAAaC,GAGlB,GAA4B,IAFPA,EAAaC,KAAKC,QAEtBC,OACb,OAAOtC,EAAAA,GAAAA,MAAY,4EAEfA,EAAAA,GAAAA,QAAA,wCAEP,CAyBP,OAlBEuC,EAAAA,EAAAA,YAAU,WAJU,IAACC,EAKG,KAAhB9C,GAJJ8B,EAA8B,MADbgB,EAQL9C,GAPuB,CAACgC,MAAOc,GAAa,CAAC,EAS5D,GAAE,CAAC9C,KAEJ6C,EAAAA,EAAAA,YAAU,WACQ,KAAVb,GAhDyC,oCAmDzCe,CAAkBf,EAEzB,GAAE,CAACA,KAKJ,0BACKI,IAAS,uBAAIA,EAAMY,UACnBd,IAAW,SAACe,EAAA,EAAD,qEACXvB,EAAOkB,OAAS,IACb,SAAC5B,EAAD,CAAkBC,MAAOS,EAAQR,SAAUA,MAItD,CCvEc,SAASgC,IACvB,OAAsCnD,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAMC,OACI,4BACI,SAACJ,EAAD,CAAYC,SANK,SAACE,GACxBC,EAAeD,EAChB,KAKO,SAACyB,EAAD,CAAazB,YAAaA,MAGnC,C","sources":["components/SearchMovie/SearchForm.jsx","components/SearchMovie/SearchMovieItems.jsx","components/SearchMovie/SearchMovie.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\n \nexport default function SearchForm({ onSubmit}) {\n    const [searchMovie, setSearchMovie] = useState('');\n\n    const handleChange = (e) => {\n        setSearchMovie(e.currentTarget.value.toLowerCase())\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (searchMovie.trim() === '') {\n            return toast(\"Enter search word, please.\");\n        }\n\n        onSubmit(searchMovie);\n        setSearchMovie('');\n    }\n\n    return (\n        <div>\n            <form className=\"SearchForm\" onSubmit={handleSubmit}>\n                <button type=\"submit\" className=\"SearchForm-button\">\n                    <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n\n                <input\n                    className=\"SearchForm-input\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movie\"\n                    name='searchMovie'\n                    value={searchMovie}\n                    onChange={handleChange}\n                />\n            </form>\n        </div>\n    )\n}\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","import React from 'react'\nimport { Link  } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n\nexport default function SearchMovieItems({ films, location }) {\n\n  return (\n    <>\n            {films.map(({ id, title }) => (\n                <li key={id} className=\"ImageGalleryItem\">\n                    <Link to={`${id}`} state={{ from: location }}>{title}</Link >\n                </li>\n            ))}\n        </>\n  )\n}\n\nSearchMovieItems.propTypes = {\n    films: PropTypes.arrayOf(PropTypes.shape({ \n        id: PropTypes.number.isRequired, \n        title: PropTypes.string.isRequired, \n        } )),\n    location: PropTypes.objectOf(PropTypes.string).isRequired,\n}","import React from 'react'\nimport { fetchMovieName } from 'components/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport SearchMovieItems from 'components/SearchMovie/SearchMovieItems';\nimport { useSearchParams, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader'\nimport { toast } from 'react-toastify';\n\n\n\nexport default function SearchMovie({ searchMovie }) {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const query = searchParams.get('query') ?? ''\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\n    async function fetchMoviesResult(searchName) {\n        setLoading(true);\n            try {\n                const responseData = await fetchMovieName(searchName);\n                handleResult(responseData);\n                setMovies(responseData.data.results);\n            }\n            catch (error) {\n                setError(error);\n            }\n            finally {\n               setLoading(false)\n            }\n    };\n\n    function handleResult(responseData) {\n        const searchResult = responseData.data.results;\n\n        if (searchResult.length === 0) {\n            return toast.error(\"Sorry, there are no images matching your search query. Please try again.\");\n        } else {\n                toast.success(`Hooray! We found some movies for you.`);\n            }\n        }\n\n    \n    const changeQuery = (movieName) => {\n        setSearchParams(movieName !== '' ? {query: movieName} : {})\n    }\n    \n    useEffect(() => {\n        if (searchMovie === '') {\n            return\n        }\n        changeQuery(searchMovie);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [searchMovie])\n\n    useEffect(() => {\n        if (query === '') {\n            return\n        }\n            fetchMoviesResult(query);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [query])\n\n    \n\n  return (\n    <ul>\n        {error && <p>{error.massage}</p>}\n        {loading && <Loader>Загружаем</Loader>}\n        {movies.length > 0 &&\n            <SearchMovieItems films={movies} location={location} />\n        }\n    </ul>\n  )\n}\n\nSearchMovie.propTypes = {\n    searchName: PropTypes.string, \n}","import React from 'react'\nimport { useState } from 'react'\nimport SearchForm from 'components/SearchMovie/SearchForm';\nimport SearchMovie from 'components/SearchMovie/SearchMovie';\n\n\nexport default function Movies() {\n const [searchMovie, setSearchMovie] = useState('');\n\n  const handleFormSubmit = (searchMovie) => {\n    setSearchMovie(searchMovie);\n  }\n\n  return (\n      <div>\n          <SearchForm onSubmit={handleFormSubmit} />\n          <SearchMovie searchMovie={searchMovie} />\n      </div>\n  )\n}\n"],"names":["SearchForm","onSubmit","useState","searchMovie","setSearchMovie","className","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","toLowerCase","SearchMovieItems","films","location","map","id","title","to","state","from","SearchMovie","movies","setMovies","useSearchParams","searchParams","setSearchParams","useLocation","query","get","loading","setLoading","error","setError","searchName","fetchMovieName","handleResult","responseData","data","results","length","useEffect","movieName","fetchMoviesResult","massage","Loader","Movies"],"sourceRoot":""}