{"version":3,"file":"static/js/248.fbf4b588.chunk.js","mappings":"iRASe,SAASA,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAJ2B,wCAM3B,WAA+BC,GAA/B,8EACIH,GAAW,GADf,mBAGuCI,EAAAA,EAAAA,IAAkBD,GAHzD,OAGkBE,EAHlB,OAIYT,EAASS,EAAaC,KAAKC,MAC3BC,QAAQC,IAAIJ,GALxB,gDAQYH,EAAS,EAAD,IARpB,yBAWYF,GAAW,GAXvB,6EAN2B,uBAqB3BU,EAAAA,EAAAA,YAAU,YArBiB,oCAsBvBC,CAAgBd,EAEnB,GAAE,IAKH,OACI,0BACKI,IAAS,yCAAiBA,EAAMW,WAChCb,IAAW,SAAC,IAAD,qEACXJ,EAAMkB,OAAS,GACZlB,EAAMmB,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,KAAhC,OACN,0BACKD,GACG,gBAAKE,UAAU,SAASC,IAAG,UAXlC,mCAWkC,OAAgBH,GAAgBI,IAAKH,EAAOI,MAAM,WAC7E,gBAAKH,UAAU,UAAUC,IAAKG,EAAOF,IAAKH,EAAMI,MAAM,WAG1D,uBAAIJ,KACJ,uCAAeF,OAPVZ,EADH,MAczB,C","sources":["components/SingleMovie/Cast.jsx"],"sourcesContent":["import React from 'react';\nimport { fetchMovieCredits } from 'components/fetchMovies'\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport noImg from 'images/noImages.jpg'\n\n\n\nexport default function Cast() {\n    const [casts, setCasts] = useState([])\n    const { movieId } = useParams();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    async function fetchMoviesCast(id) {\n        setLoading(true);\n            try {\n                const responseData = await fetchMovieCredits(id);\n                setCasts(responseData.data.cast);\n                console.log(responseData);\n            }\n            catch (error) {\n                setError(error);\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n    \n    useEffect(() => {\n        fetchMoviesCast(movieId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const imageURL = \"https://image.tmdb.org/t/p/w500\";\n    \n\n    return (\n        <ul>\n            {error && <p>error massage{error.massage}</p>}\n            {loading && <Loader>Загружаем</Loader>}\n            {casts.length > 0 &&\n                casts.map(({ id, character, profile_path, name }) => (\n                    <li key={id}>\n                        {profile_path ? \n                            <img className=\"poster\" src={`${imageURL}${profile_path}`} alt={name}  width='100px' /> : \n                            <img className=\"noImage\" src={noImg} alt={name} width='100px' />\n                        }\n                        {/* <img src={`${imageURL}${profile_path}`} alt={name} width='100px' /> */}\n                        <p>{name}</p>\n                        <p>Character: {character}</p>\n                    </li>\n                ))\n            }\n        </ul>\n    )\n}"],"names":["Cast","useState","casts","setCasts","movieId","useParams","loading","setLoading","error","setError","id","fetchMovieCredits","responseData","data","cast","console","log","useEffect","fetchMoviesCast","massage","length","map","character","profile_path","name","className","src","alt","width","noImg"],"sourceRoot":""}